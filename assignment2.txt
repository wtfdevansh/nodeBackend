Aggregate Functions:
Perform different operations on the following:

Q1. Find all products with price ≥ 1000
-> db.products.aggregate([ { $match: { price: {  $gte: 1000  } } } ])

Q2. Count total number of products in each category
-> db.products.aggregate([
  { $group: { _id: "$category", totalProducts: { $sum: 1 } } }
])

Q3. Get the maximum and minimum price of products in each category
-> db.products.aggregate([
  {
    $group: {
      _id: "$category",
      maxPrice: { $max: "$price" },
      minPrice: { $min: "$price" }
    }
  }
])

Q4. Find top 3 most expensive products (name & price only)
-> db.products.aggregate([
  { $project: { name: 1, price: 1, _id: 0 } },
  { $sort: { price: -1 } },
  { $limit: 3 }
])

Q5. Get the average price of products supplied by each supplier country
-> db.products.aggregate([
  {
    $group: {
      _id: "$supplier.country",
      avgPrice: { $avg: "$price" }
    }
  }
])

Q6. Count how many products have stock ≤ 10
-> db.products.aggregate([
  { $match: { stock: { $lte: 10 } } },
  { $count: "lowStockProducts" }
])

Q7. Find total stock value (price × stock) of each category
-> db.products.aggregate([
  {
    $group: {
      _id: "$category",
      totalStockValue: { $sum: { $multiply: ["$price", "$stock"] } }
    }
  }
])

Q8. Get the most recent 5 products added (sorted by createdAt)
-> db.products.aggregate([
  { $sort: { createdAt: -1 } },
  { $limit: 5 }
])

Q9. Find all categories having more than 5 products
-> db.products.aggregate([
  { $group: { _id: "$category", total: { $sum: 1 } } },
  { $match: { total: { $gt: 5 } } }
])
